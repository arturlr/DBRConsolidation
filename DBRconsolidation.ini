[athena]
dbrCreation=create database if not exists dbr
dbrBlendedTable=create external table if not exists `dbr.autodbr_**ACCT**_**DATETABLE**` (
    `InvoiceID` string,
    `PayerAccountId` string,
    `LinkedAccountId` string,
    `RecordType` string,
    `RecordId` string,
    `ProductName` string,
    `RateId` string,
    `SubscriptionId` string,
    `PricingPlanId` string,
    `UsageType` string,
    `Operation` string,
    `AvailabilityZone` string,
    `ReservedInstance` string,
    `ItemDescription` string,
    `UsageStartDate` string,
    `UsageEndDate` string,
    `UsageQuantity` string,
    `BlendedRate` string,
    `BlendedCost` string,
    `UnBlendedRate` string,
    `UnBlendedCost` string
    )
    STORED AS PARQUET
    LOCATION 's3://**BUCKET**/dbr-parquet/**ACCT**-**DATEBUCKET**/'
dbrTable=create external table if not exists `dbr.autodbr_**ACCT**_**DATETABLE**` (
    `InvoiceID` string,
    `PayerAccountId` string,
    `LinkedAccountId` string,
    `RecordType` string,
    `RecordId` string,
    `ProductName` string,
    `RateId` string,
    `SubscriptionId` string,
    `PricingPlanId` string,
    `UsageType` string,
    `Operation` string,
    `AvailabilityZone` string,
    `ReservedInstance` string,
    `ItemDescription` string,
    `UsageStartDate` string,
    `UsageEndDate` string,
    `UsageQuantity` string,
    `Rate` string,
    `Cost` string
    )
    STORED AS PARQUET
    LOCATION 's3://**BUCKET**/dbr-parquet/**ACCT**-**DATEBUCKET**/'

[accountmetric-01]
enabled=true
name=Total Month-to-Date Payer
sqlQuery=SELECT
    payeraccountid,
    SUM(CAST(**COST** AS double)) AS value
    FROM dbr.autodbr_**ACCT**_**DATETABLE**
    WHERE recordtype NOT IN ('InvoiceTotal', 'StatementTotal', 'Rounding')
    GROUP BY payeraccountid


[accountmetric-02]
enabled=true
name=Total Month-to-Date Linked
sqlQuery=SELECT DISTINCT
    linkedaccountid,
    SUM(CAST(**COST** AS double)) AS value
    FROM dbr.autodbr_**ACCT**_**DATETABLE**
    WHERE recordtype NOT IN ('InvoiceTotal', 'StatementTotal', 'Rounding')
    GROUP BY linkedaccountid

[accountmetric-03]
enabled=true
name=Total Per Hour Payer
sqlQuery=SELECT
    payeraccountid,
    substr(usagestartdate, 1, 13) AS date,
    sum(cast(**COST** as double)) AS value
    FROM dbr.autodbr_**ACCT**_**DATETABLE**
    WHERE length(usagestartdate) >= 19
    AND try_cast(usagestartdate as timestamp) IS NOT NULL
    AND try_cast(usagestartdate as timestamp) > now() - interval '24' hour
    AND try_cast(usagestartdate as timestamp) < now()
    GROUP BY payeraccountid, substr(usagestartdate, 1, 13)
    ORDER BY substr(usagestartdate, 1, 13) desc

[accountmetric-04]
enabled=true
name=Total Per Hour Linked
sqlQuery=SELECT distinct
      linkedaccountid,
      substr(usagestartdate, 1, 13) AS date,
      sum(cast(**COST** as double)) AS value
    FROM dbr.autodbr_**ACCT**_**DATETABLE**
    WHERE length(usagestartdate) >= 19
    AND try_cast(usagestartdate as timestamp) IS NOT NULL
    AND try_cast(usagestartdate as timestamp) > now() - interval '24' hour
    AND try_cast(usagestartdate as timestamp) < now()
    AND length(linkedaccountid) > 1
    AND linkedaccountid != payeraccountid
    GROUP BY
      linkedaccountid,
      substr(usagestartdate, 1, 13)
    ORDER BY
      substr(usagestartdate, 1, 13),
      sum(cast(**COST** as double)) desc


[accountmetric-05]
enabled=true
name=Services Per Hour Linked
sqlQuery=SELECT
      productname,
      substr(usagestartdate, 1, 13) AS date,
      sum(cast(**COST** as double)) AS value
    FROM dbr.autodbr_**ACCT**_**DATETABLE**
    WHERE length(usagestartdate) >= 19
    AND try_cast(usagestartdate as timestamp) IS NOT NULL
    AND try_cast(usagestartdate as timestamp) > now() - interval '24' hour
    AND try_cast(usagestartdate as timestamp) < now()
    GROUP BY
      productname,
      substr(usagestartdate, 1, 13)
    HAVING sum(cast(**COST** as double)) > 0
    ORDER BY substr(usagestartdate, 1, 13), productname desc



[accountmetric-06]
enabled=true
name=Services Month-to-Date
sqlQuery=SELECT
      productname,
      substr(usagestartdate, 1, 13) AS date,
      sum(cast(**COST** as double)) AS value
    FROM dbr.autodbr_**ACCT**_**DATETABLE**
    WHERE length(usagestartdate) >= 19
    GROUP BY
      productname
    ORDER BY productname desc